import {GoogleGenerativeAI} from "@google/generative-ai";
import {NextResponse} from "next/server";
import OpenAI from "openai";

export const maxDuration = 300;
export const runtime = "nodejs";
export const dynamic = 'force-dynamic';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: Request) {
  const input: {
    bpAnalysisResponse: string;
    advanceNotice: string;
    referenceSalary: string;
    seniority: string;
  } = await req.json();

  try {
    const prompt = `
# R√®gle de calcul:
- Utilise toujours un interpr√©teur Python pour effectuer chacun de tes calculs dans ton raisonnement.
- Prendre en compte l‚Äôanciennet√© jusqu‚Äô√† la date de fin du pr√©avis

# Calculer l'indemnit√© l√©gale
L‚Äôindemnit√© l√©gale de licenciement est calcul√©e en fonction de l‚Äôanciennet√© du salari√© :
‚Ä¢ 1/4 de mois de salaire par ann√©e d‚Äôanciennet√© pour les ann√©es jusqu‚Äô√† 10 ans.
‚Ä¢ 1/3 de mois de salaire par ann√©e d‚Äôanciennet√© pour les ann√©es au-del√† de 10 ans.
Exemple : Pour un salari√© ayant un salaire de r√©f√©rence de 2 000 ‚Ç¨ et une anciennet√© de 12 ans :
- Pour les 10 premi√®res ann√©es : (2000 x (1/4) x 10) = 5000
- Pour les 2 ann√©es suivantes : (2000 x (1/3) x 2) = 1333.33
- Total : 6333.33

NB : Consid√©rer les Ann√©es Incompl√®tes. Si l‚Äôann√©e d‚Äôanciennet√© est incompl√®te, l‚Äôindemnit√© est calcul√©e proportionnellement au nombre de mois complets.
Par exemple, pour une anciennet√© de 10 ans et 6 mois :
Les 6 mois suppl√©mentaires seraient compt√©s comme (Salaire x (1/4) x (6/12))

## Cas Particuliers
1. Travail √† Temps Partiel : Si le salari√© a travaill√© √† temps partiel pendant une partie de son contrat, l‚Äôindemnit√© doit √™tre calcul√©e s√©par√©ment pour chaque p√©riode (temps plein et temps partiel).
2. En cas de licenciement pour faute grave ou lourde : pas d‚Äôindemnit√©.
3. L'indemnit√© de licenciement, qu'elle soit d'origine l√©gale, conventionnelle ou pr√©vue par le contrat de travail, peut √™tre cumul√©e avec les indemnit√©s suivantes :
  - Indemnit√© compensatrice de pr√©avis
  - Indemnit√© compensatrice de cong√©s pay√©s
  - Indemnit√© pour licenciement irr√©gulier, sans cause r√©elle et s√©rieuse ou nul
  - Indemnit√© allou√©e par le juge en cas de requalification d'un CDD en CDI
  - Contrepartie p√©cuniaire pr√©vue en cas de clause de non-concurrence
  - Indemnit√© forfaitaire √©gale √† 6 mois de salaire accord√©e au salari√© dont le contrat de travail a √©t√© dissimul√©.
 
# Donn√©es disponibles :
- Pr√©avis : ${input.advanceNotice}
- Salaire de r√©f√©rence : ${input.referenceSalary}
- Anciennet√© : ${input.seniority}
- Derniers bulletins de paie :
\`\`\`
${input.bpAnalysisResponse}
\`\`\`

# R√©ponse attendue
- La r√©ponse doit √™tre concise, structur√© en affichant clairement le montant et l'√©tape de calcul (sans afficher le r√©sultat calcul√© par Python) afin qu'un humain comprenne.
  `;
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    const result = await model.generateContent({
      contents: [
        {
          role: "user", parts: [
            {text: prompt},
          ]
        }
      ]
    });
    const message = result.response.text();
    console.log('message:', message);

    // üîπ Second LLM Call: Extract Only the Value in "X mois" Format
    const extractionPrompt = `
Objectif :
√Ä partir du texte suivant, extrait uniquement le montant de l'indemnit√© de licenciement avec le symbole de la monnaie. N'inclus aucun autre texte ou explication.

Texte :  
"${message}"

R√©ponse attendue :  
Retourne uniquement le montant de l'indemnit√© de licenciement avec le symbole de la monnaie.
`;
    const extractionResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0,
      messages: [
        {
          role: "user",
          content: extractionPrompt,
        },
      ],
    });
    const extractedValue = extractionResponse.choices[0].message.content?.trim() || "Erreur dans l'extraction du mod√®le";
    console.log('Extracted value:', extractedValue);

    return NextResponse.json({
      message: message,
      value: extractedValue,
    }, { status: 200 });
  } catch (error) {
    console.error("cannot compute legal indemnities:", error);
    return NextResponse.json({ message: 'Failed to compute legal indemnities' }, { status: 500 });
  }
}
