import {GoogleGenerativeAI} from "@google/generative-ai";
import {NextResponse} from "next/server";
import OpenAI from "openai";

export const maxDuration = 300;
export const runtime = "nodejs";
export const dynamic = 'force-dynamic';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: Request) {
  const input: {
    bpAnalysisResponse: string;
  } = await req.json();

  try {
    const prompt = `
# Objectif :
Ton r√¥le est de calculer le salaire brute de r√©f√©rence d'apr√®s le calcul l√©gal.

# R√®gle de calcul:
- Utilise toujours un interpr√©teur Python pour effectuer chacun de tes calculs dans ton raisonnement.
- Effectue une double v√©rification de tes calculs.

# D√©terminer le salaire brute de r√©f√©rence
Le Salaire Brute de R√©f√©rence correspond au montant le plus √©lev√© entre :
- La moyenne mensuelle des 12 derniers mois pr√©c√©dant la rupture du contrat
OU
- Le tiers des 3 derniers mois, en ajoutant 1/12√®me des primes annuelles √† chaque mois si applicable

## Explication du tiers des 3 derniers mois:
1. Additionner les Salaires Bruts des 3 Derniers Mois :
‚Ä¢ Calculez la somme des salaires bruts per√ßus au cours des trois derniers mois pr√©c√©dant le licenciement.
2. Ajouter 1/12√®me des Primes Annuelles :
‚Ä¢ Si le salari√© a re√ßu une prime annuelle, ajoutez 1/12√®me de cette prime √† chacun des trois mois concern√©s.
3. Calculer le Tiers de la Somme Totale :
‚Ä¢ Divisez la somme totale obtenue (salaires bruts + parts de primes) par trois pour obtenir le salaire de r√©f√©rence.

**Exemple Concret**
Supposons qu'un salari√© ait per√ßu les salaires suivants au cours des trois derniers mois :
- Mois 1 : 2 000 ‚Ç¨
- Mois 2 : 2 100 ‚Ç¨
- Mois 3 : 2 050 ‚Ç¨

Et qu'il ait re√ßu une prime annuelle de 1 200 ‚Ç¨.

**Calcul**
1. **Ajouter la Part Mensuelle de la Prime Annuelle :**
    Part mensuelle de la prime = 1 200 / 12 = 100
2. **Calculer les Salaires Ajust√©s :**
    - Mois 1 : 2 000 + 100 = 2 100
    - Mois 2 : 2 100 + 100 = 2 200
    - Mois 3 : 2 050 + 100 = 2 150
3. **Somme Totale des Salaires Ajust√©s :**
    Total = 2 100 + 2 200 + 2 150 = 6 450
4. **Calculer le Tiers :**
    Salaire de r√©f√©rence = 6 450 / 3 = 2 150

Ainsi, le salaire de r√©f√©rence pour ce salari√© serait de 2 150 ‚Ç¨ par mois selon cette m√©thode.
Cette m√©thode peut √™tre plus avantageuse si les salaires ou primes r√©cents sont plus √©lev√©s que ceux des mois pr√©c√©dents.
En r√©sum√©, cet exemple illustre le calcul d'un salaire de r√©f√©rence en tenant compte d'une prime annuelle. On divise la prime annuelle par 12 pour obtenir un montant mensuel, que l'on ajoute ensuite √† chaque salaire mensuel des trois derniers mois. On additionne ensuite ces salaires ajust√©s et on divise le total par 3 pour obtenir le salaire de r√©f√©rence. Il est not√© que cette m√©thode est plus avantageuse si les salaires r√©cents sont plus √©lev√©s.

## Explication du salaire de r√©f√©rence
Le salaire de r√©f√©rence est compos√© :
1. **Salaire de Base**
‚Ä¢ Le salaire mensuel fixe √©tabli par le contrat de travail.
2. **Primes et Gratifications**
‚Ä¢ Primes annuelles (ex. prime de fin d‚Äôann√©e, treizi√®me mois) : elles doivent √™tre r√©parties sur les mois concern√©s.
‚Ä¢ Primes exceptionnelles : proportionn√©es sur la p√©riode de r√©f√©rence.
‚Ä¢ Primes li√©es √† la performance, telles que les primes d‚Äôobjectif ou de r√©sultat.
3. **Commissions**
‚Ä¢ Les commissions per√ßues pendant la p√©riode de r√©f√©rence, qui sont souvent bas√©es sur les ventes ou la performance.
4. **Heures Suppl√©mentaires**
‚Ä¢ R√©mun√©ration des heures suppl√©mentaires effectu√©es.
5. **Avantages en Nature**
‚Ä¢ Valeur des avantages en nature (ex. voiture de fonction, logement).
Exemple:
Un salari√© a travaill√© 3 ans √† temps plein, puis 2 ans √† mi-temps. Son salaire brut moyen pendant les 12 derniers mois √† mi-temps est de 1 000 ‚Ç¨ (soit 2 000 ‚Ç¨ √† temps plein). Le calcul de l'indemnit√© est le suivant  : (2000 x (1/4) x 3) + (1000 x (1/4) x 2) = 2 000 ‚Ç¨.

## Cas particulier en arr√™t de travail
Lorsque le salari√© a √©t√© en arr√™t de travail pour maladie au cours des derniers mois, le salaire de r√©f√©rence √† prendre en compte est celui des 12 ou des 3 derniers mois pr√©c√©dant l'arr√™t.

# Donn√©es disponibles :  
- Derniers bulletins de paie :
\`\`\`
${input.bpAnalysisResponse}
\`\`\`

# R√©ponse attendue :
- Tu dois afficher uniquement cette r√©ponse √† l'utilisateur :
"Calcul du salaire de r√©f√©rence ü§ë: 

M√©thode 12 derniers mois : XXX + XXX + XXX + ‚Ä¶. XXX = [montant du salaire de r√©f√©rence 1].
M√©thode 3 derniers mois : XXXX + XXXX + XXXX = [montant du salaire de r√©f√©rence 2].
Le [montant salaire de r√©f√©rence 1] est plus favorable car [montant du salaire de r√©f√©rence 1] > [montant du salaire de r√©f√©rence 2]. Nous allons retenir celui-ci pour la suite des calculs."
`;
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      temperature: 0,
      messages: [
        {
          role: "user",
          content: prompt,
        },
      ],
    });
    const message = response.choices[0].message.content?.trim()
    console.log('message:', message);

    // üîπ Second LLM Call: Extract Only the Value in "X mois" Format
    const extractionPrompt = `
Objectif :
√Ä partir du texte suivant, extrait uniquement le montant du salaire de r√©f√©rence le plus favorable. N'inclus aucun autre texte ou explication.

Texte :  
"${message}"

R√©ponse attendue :  
Retourne uniquement le montant du salaire de r√©f√©rence le plus favorable avec le symbole de la monnaie.
`;
    const extractionResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0,
      messages: [
        {
          role: "user",
          content: extractionPrompt,
        },
      ],
    });
    const extractedValue = extractionResponse.choices[0].message.content?.trim() || "Erreur dans l'extraction du mod√®le";
    console.log('Extracted value:', extractedValue);

    return NextResponse.json({
      message: message,
      value: extractedValue,
    }, { status: 200 });
  } catch (error) {
    console.error("cannot compute legal reference salary:", error);
    return NextResponse.json({ message: 'Failed to compute legal reference salary' }, { status: 500 });
  }
}
