import {NextResponse} from "next/server";
import {GoogleGenerativeAI} from "@google/generative-ai";
import OpenAI from "openai";

export const maxDuration = 300;
export const runtime = "nodejs";
export const dynamic = 'force-dynamic';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: Request) {
  const input: {
    bpAnalysisResponse: string;
    seniority: string;
  } = await req.json();

  try {
    const prompt = `
Objectif :
Calcule le d√©lai de pr√©avis applicable pour un salari√© licenci√© en suivant les r√®gles l√©gales fran√ßaises pr√©vues par le Code du travail.

R√®gles de calcul :  
- Utilise un interpr√©teur Python pour effectuer et v√©rifier chaque √©tape du calcul.
- Calcule le pr√©avis en fonction de l‚Äôanciennet√© du salari√©, exprim√©e en ann√©es et mois.
- Assure-toi que chaque √©tape du calcul respecte les r√®gles g√©n√©rales du Code du travail.

R√®gles d'interpr√©tation :
- Si plusieurs sc√©narios sont possibles selon l'anciennet√©, applique la r√®gle correspondant pr√©cis√©ment √† une anciennet√© de ${input.seniority}.
- Prends en compte uniquement les r√®gles l√©gales standards sans r√©f√©rence √† une convention collective ou un accord sp√©cifique.
- Retourne la dur√©e du pr√©avis sous forme num√©rique, suivie du mot "mois" (exemple : "2 mois").
- Ajoute une explication concise de ton raisonnement en mentionnant les articles ou principes cl√©s du Code du travail qui ont guid√© ton calcul.

Donn√©es disponibles :
- Anciennet√© du salari√© : ${input.seniority}
- Bulletins de paie du salari√© :
\`\`\`
${input.bpAnalysisResponse}
\`\`\`

R√©ponse attendue :
- Retourne la dur√©e du pr√©avis sous le format : "X mois".
- Ajoute une explication concise du raisonnement, incluant les articles du Code du travail ou les r√®gles l√©gales appliqu√©es pour arriver au r√©sultat.
- - La r√©ponse doit √™tre concise, structur√© en affichant clairement le montant et l'√©tape de calcul (sans afficher le r√©sultat calcul√© par Python) afin qu'un humain comprenne.
`;
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    const result = await model.generateContent({
      contents: [
        {
          role: "user", parts: [
            {text: prompt},
          ]
        }
      ]
    });
    const message = result.response.text();
    console.log('message:', message);

    // üîπ Second LLM Call: Extract Only the Value in "X mois" Format
    const extractionPrompt = `
Objectif :
√Ä partir du texte suivant, extrait uniquement la dur√©e du pr√©avis sous le format "X mois". N'inclus aucun autre texte ou explication.

Texte :  
"${message}"

R√©ponse attendue :  
Retourne uniquement la dur√©e sous le format : "X mois".
`;
    const extractionResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0,
      messages: [
        {
          role: "user",
          content: extractionPrompt,
        },
      ],
    });
    const extractedValue = extractionResponse.choices[0].message.content?.trim() || "Erreur dans l'extraction du mod√®le";
    console.log('Extracted value:', extractedValue);

    return NextResponse.json({
      message: message,
      value: extractedValue,
    }, { status: 200 });
  } catch (error) {
    console.error("cannot compute legal advance notice:", error);
    return NextResponse.json({ message: 'Failed to compute legal advance notice' }, { status: 500 });
  }
}
