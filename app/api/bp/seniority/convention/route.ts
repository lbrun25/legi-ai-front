import {NextResponse} from "next/server";
import {searchArticlesInCollectiveAgreement} from "@/lib/supabase/agreements";
import {GoogleGenerativeAI} from "@google/generative-ai";
import OpenAI from "openai";

export const maxDuration = 300;
export const runtime = "nodejs";
export const dynamic = 'force-dynamic';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: Request) {
  const input: {
    bpAnalysisResponse: string;
    idcc: string;
    entryDate: string;
    notificationDate: string;
  } = await req.json();

  try {
    const query = "Comment d√©terminer l'anciennet√© du salari√© ?";
    const relevantArticles = await searchArticlesInCollectiveAgreement(input.idcc, query);
    const relevantArticlesText = relevantArticles.map(article => article.content).join('\n\n');
    const prompt = `
Objectif :
D√©termine avec pr√©cision l'anciennet√© du salari√© en utilisant les informations suivantes :
- Les derniers bulletins de paie.
- La date d'entr√©e du salari√©.
- La date de notification de licenciement.
- Les articles pertinents de la convention collective (${input.idcc}).

Effectue ensuite une double v√©rification de tes calculs pour garantir leur exactitude.

R√®gles de calcul :
- Utilise un interpr√©teur Python pour effectuer et v√©rifier chaque √©tape de tes calculs.
- Prends en compte :
   - Les p√©riodes travaill√©es effectives.
   - Les absences r√©mun√©r√©es ou assimil√©es si elles sont pr√©cis√©es dans la convention collective.
   - Les √©ventuelles p√©riodes exclues du calcul d'anciennet√© selon les r√®gles sp√©cifiques de la convention collective.
- Calcule l'anciennet√© en ann√©es et mois complets, en utilisant avec pr√©cision les dates d'entr√©e et de notification de licenciement.

Donn√©es disponibles :
- **Derniers bulletins de paie :**
\`\`\`
${input.bpAnalysisResponse}
\`\`\`  

- **Date d'entr√©e du salari√© :**  
${input.entryDate}  

- **Date de notification de licenciement :**
${input.notificationDate}  

- **Articles pertinents de la convention collective (${input.idcc}) :**
\`\`\`
${relevantArticlesText}
\`\`\`

R√©ponse attendue :
- Retourne l'anciennet√© du salari√© sous le format suivant : "X ann√©es et Y mois".
- Fournis une explication d√©taill√©e des calculs, incluant les r√®gles appliqu√©es et les hypoth√®ses √©ventuelles.
- Assure-toi que les calculs ont √©t√© doublement v√©rifi√©s et qu'ils ne contiennent aucune erreur.
- La r√©ponse doit √™tre concise, structur√© en affichant clairement le montant et l'√©tape de calcul (sans afficher le r√©sultat calcul√© par Python) afin qu'un humain comprenne.
  `;
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    const result = await model.generateContent({
      contents: [
        {
          role: "user", parts: [
            {text: prompt},
          ]
        }
      ]
    });
    const message = result.response.text();
    console.log('message:', message);

    // üîπ Second LLM Call: Extract Only the Value in "X mois" Format
    const extractionPrompt = `
Objectif :
√Ä partir du texte suivant, extrait uniquement la dur√©e de l'anciennet√© sous le format "X ann√©es et Y mois". N'inclus aucun autre texte ou explication.

Texte :  
"${message}"

R√©ponse attendue :  
Retourne uniquement la dur√©e sous le format : "X ann√©es et Y mois".
`;
    const extractionResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0,
      messages: [
        {
          role: "user",
          content: extractionPrompt,
        },
      ],
    });
    const extractedValue = extractionResponse.choices[0].message.content?.trim() || "Erreur dans l'extraction du mod√®le";
    console.log('Extracted value:', extractedValue);

    return NextResponse.json({
      message: message,
      value: extractedValue,
    }, { status: 200 });
  } catch (error) {
    console.error("cannot compute seniority with convention:", error);
    return NextResponse.json({ message: 'Failed to compute seniority with convention' }, { status: 500 });
  }
}
